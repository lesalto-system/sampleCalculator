'use strict';

let total = 0;          // 現在の計算結果i
let inputData = "";     // 現在入力している値
let calcOperator = "+"; // 現在の入力値の演算子
let dataFlg = 1;        // １回前に入力したもの 0:数字 1:演算子

/**
 *   クリアボタンを押下した時：
 *   グローバル変数を初期化
 */
function doClear() {
    total = 0;                        // 現在の合計値を初期化
    inputData = "";                   // 現在の入力値を初期化
    calcOperator = "+";               // 現在の入力値の演算子を初期化
    dataFlg = 1;                      // 1回前に入力値を初期化
    document.myForm.result.value = 0; // 結果を電卓に表示
}

/**
 * 数字ボタンを押下された時:
 *   数字が入力されたデータを文字列連結し、結果を電卓に表示
 */
function doValue(number) {
    dataFlg = 0;  // 一回前に入力したものを数字にする

    // 引数の値(数字)を文字列連結し、現在の入力値を更新
    // 現在の入力値を文字列から数字に変換して電卓に表示
}


/**
 * 演算子ボタンを押下された時: 
 *   1回前の入力値が数値で 演算子ボタンが = ではない場合
 *     ・一回前に入力したものを演算子にする
 *     ・exeCalc関数を呼び出し、計算を行う
 *     ・現在の入力している値を初期化
 *     ・現在の入力値の演算子を更新
 *     ・exeCalc関数の計算結果を電卓に表示
 * 
 * 　引数の入力演算子が = の場合
 *     ・一回前に入力したものを演算子にする
 *     ・現在の合計値に、電卓で表示されている値を格納
 *     ・現在の入力値の演算子を更新
 *     ・現在の入力している値を初期化
 * 
 *   引数の入力演算子が = ではない場合
 *     ・一回前に入力したものを演算子にする
 *     ・現在の入力値の演算子を更新
 */ 
function doCalculate(data) 
{
    // 1回前の入力値が数値で 現在の入力値の演算子が = ではない場合
        // 一回前に入力したものを演算子にする
        // exeCalc関数を呼び出し、計算を行う
        // 現在の入力している値を初期化
        // 現在の入力値の演算子を更新
        // exeCalc関数の計算結果を電卓に表示

    // 引数の入力演算子が = の場合
        // 一回前に入力したものを演算子にする
        // 現在の入力値の演算子を更新
        // 現在の入力している値を初期化

    // 引数の入力演算子が = ではない場合
        // 一回前に入力したものを演算子にする
        // 現在の入力値の演算子を更新

}


/**
 * 演算子ボタン(+又は-)を押下された時:
 *    入力された演算子で 現在の合計値 と 現在の入力値 を計算
 *
 *  total: 現在の合計値
 *  inputData: 現在の入力値
 *  calcOperator: 入力された演算子 ( + 又は - )  
 */
function exeCalc(total, inputData, calcOperator)
{
    // グローバル変数に干渉しないように、関数内で変数名 tmpData, tmpToalで宣言を行い
    // inputData、totalのそれぞれの値を文字列から数字に変換し、それぞれを宣言した変数に格納

    // 入力された演算子が + の場合、計算を行い結果を返却

    // 入力された演算子が - の場合、計算を行い結果を返却
}
